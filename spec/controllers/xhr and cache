alias for xml_http_request?
    Update a web page without reloading the page
    Request data from a server after the page has loaded
    Receive data from a server after the page has loaded
    Send data to a server in the background



######Caching 
http://guides.rubyonrails.org/v2.3.11/caching_with_rails.html
 Page Caching

class ProductsController < ActionController

  caches_page :index

  def index; end

  def create
    expire_page :action => :index
  end

end

 Action Caching
class ProductsController < ActionController

  before_filter :authenticate, :only => [ :edit, :create ]
  caches_page :index
  caches_action :edit

  def index; end

  def create
    expire_page :action => :index
    expire_action :action => :edit
  end

  def edit; end

end


Fragment Caching



<% Order.find_recent.each do |o| %>
  <%= o.buyer.name %> bought <% o.product.name %>
<% end %>

<% cache do %>
  All available products:
  <% Product.find(:all).each do |p| %>
    <%= link_to p.name, product_url(p) %>
  <% end %>
<% end %>



Sweepers

Cache sweeping is a mechanism which allows you to get around having a ton of expire_{page,action,fragment} calls in your code. It does this by moving all the work required to expire cached content into na ActionController::Caching::Sweeper class. This class is an Observer that looks for changes to an object via callbacks, and when a change occurs it expires the caches associated with that object in an around or after filter.


class ProductsController < ActionController

  before_filter :authenticate, :only => [ :edit, :create ]
  caches_page :list
  caches_action :edit
  cache_sweeper :store_sweeper, :only => [ :create ]

  def list; end

  def create
    expire_page :action => :list
    expire_action :action => :edit
  end

  def edit; end

end
The sweeper has to be added to the controller that will use it. So, if we wanted to expire the cached content for the list and edit actions when the create action was called, we could do the above

